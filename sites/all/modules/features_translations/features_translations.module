<?php

/**
 * Implementation of hook_features_api().
 */
function features_translations_features_api() {
  return array(
    'translations' => array(
      'name' => t('Translations'),
      'default_hook' => 'translations_defaults',
      'feature_source' => TRUE,
      'default_file' => FEATURES_DEFAULTS_INCLUDED,
    ),
  );
}

/**
 * Implementation of hook_features_export_options().
 */
function translations_features_export_options() {
  $options = array();
  $textgroups = module_invoke_all('locale', 'groups');
  foreach (language_list() as $langcode => $language) {
    if ($langcode == 'en') continue;
    foreach ($textgroups as $textgroup => $label) {
      $options[$langcode . ':' . $textgroup] = $language->name . ': ' . $label;
    }
  }
  return $options;
}

/**
 * Implementation of hook_features_export().
 */
function translations_features_export($data, &$export, $module_name) {
  $export['features']['translations'] = array_combine(array_values($data), array_values($data));
  $export['dependencies']['features'] = 'features';
  return array();
}

/**
 * Implementation of hook_features_export_render().
 */
function translations_features_export_render($module_name, $data, $export = NULL) {
  $languages = language_list();
  $code = array();
  $code[] = '  $translations = array();';
  foreach ($data as $component) {
    list($langcode, $textgroup) = explode(':', $component);
    $strings = _features_translations_locale_export_get_strings($languages[$langcode], $textgroup);
    foreach ($strings as $lid => $string) {
      $code[] = "  \$translations['{$langcode}:{$textgroup}'][{$lid}] = " . features_var_export($string, '  ') . ";";
    }
  }
  $code[] = '  return $translations;';
  $code = implode("\n", $code);
  return array('translations_defaults' => $code);
}

/**
 * Implementation of hook_features_revert().
 */
function translations_features_revert($module_name) {
  include_once('includes/locale.inc');
  $translations = features_get_default('translations', $module_name);
  if (!empty($translations)) {
    $report = array();
    foreach ($translations as $key => $strings) {
      list($langcode, $textgroup) = explode(':', $key);
      foreach ($strings as $lid => $string) {
        _locale_import_one_string_db($report, $langcode, $string['context'], $string['source'], $string['translation'], $textgroup, $string['location'], LOCALE_IMPORT_OVERWRITE, $string['plid'], $string['plural']);
      }
    }
  }
  return TRUE;
}

/**
 * Implementation of hook_features_export_rebuild().
 */
function translations_features_export_rebuild($module_name) {
  return translations_features_revert($module_name);
}

/**
 * Helper to return translated strings in given language and group.
 */
function _features_translations_locale_export_get_strings($language = NULL, $group = 'default') {
  if (isset($language)) {
    $result = db_query("SELECT s.lid, s.source, s.context, s.location, t.translation, t.plid, t.plural FROM {locales_source} s INNER JOIN {locales_target} t ON s.lid = t.lid AND t.language = :language WHERE s.textgroup = :textgroup ORDER BY t.plid, t.plural", array(':language' => $language->language, ':textgroup' => $group));
  }
  else {
    $result = db_query("SELECT s.lid, s.source, s.context, s.location, t.plid, t.plural FROM {locales_source} s INNER JOIN {locales_target} t ON s.lid = t.lid WHERE s.textgroup = :textgroup ORDER BY t.plid, t.plural", array(':textgroup' => $group));
  }
  $strings = array();
  foreach ($result as $string) {
    $strings[$string->lid] = $string;
  }
  return $strings;
}

